# streamlit_top_mgmt_app.py
# Executive-style dashboard for Real Estate Sales Phasing results
# - KPIs
# - Filters (month range, product type)
# - Clean charts (matplotlib, 1 graphe par vue)

import os
import pandas as pd
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt

st.set_page_config(page_title="Executive Dashboard ‚Äî Sales Phasing OR", layout="wide")
st.title("üèóÔ∏è Executive Dashboard ‚Äî Real Estate Sales Phasing (OR)")
st.caption("Designed for top management: KPIs ‚Ä¢ Cashflow ‚Ä¢ Bank Draw ‚Ä¢ Sales Mix")

# ---------- Sidebar controls
st.sidebar.header("Data Source")
base_dir = st.sidebar.text_input("Base folder (contains results/)", value=os.getcwd())
results_dir = "/Users/mac/sales schedule/results"
sales_path = "/Users/mac/sales schedule/results/sales_schedule.csv"
monthly_path = "/Users/mac/sales schedule/results/monthly_cashflow.csv"

if not (os.path.exists(sales_path) and os.path.exists(monthly_path)):
    st.error(
        f"Results not found. Expected files:\n- {sales_path}\n- {monthly_path}\n"
        "Run the optimizer first or adjust the base folder in the sidebar."
    )
    st.stop()

sales = pd.read_csv(sales_path)
monthly = pd.read_csv(monthly_path)

# ---------- Schema checks
exp_sales_cols = {
    "lot_id", "type", "floor", "surface_m2", "view_premium",
    "price", "cost", "earliest_month", "sold_month"
}
exp_monthly_cols = {
    "month", "cash_in_from_sales", "lot_costs_out",
    "construction_cost", "bank_draw", "balance_end"
}
if not exp_sales_cols.issubset(set(sales.columns)) or not exp_monthly_cols.issubset(set(monthly.columns)):
    st.error("Unexpected schema in results CSVs. Please ensure they were generated by the optimizer.")
    st.stop()

# ---------- Filters
st.sidebar.header("Filters")
months = sorted(monthly["month"].unique())
m_min, m_max = int(min(months)), int(max(months))
sel_range = st.sidebar.slider("Month range", min_value=m_min, max_value=m_max, value=(m_min, m_max))

type_options = ["(All)"] + sorted(sales["type"].dropna().unique().tolist())
sel_type = st.sidebar.selectbox("Product type", type_options, index=0)

# Apply filters
sales_f = sales[
    ((sales["sold_month"] >= sel_range[0]) & (sales["sold_month"] <= sel_range[1]))
    | (sales["sold_month"] == 0)
].copy()
if sel_type != "(All)":
    sales_f = sales_f[sales_f["type"] == sel_type]

monthly_f = monthly[(monthly["month"] >= sel_range[0]) & (monthly["month"] <= sel_range[1])].copy()

# ---------- KPIs
total_revenue = sales_f.loc[sales_f["sold_month"] > 0, "price"].sum()
total_margin = (sales_f.loc[sales_f["sold_month"] > 0, "price"] - sales_f.loc[sales_f["sold_month"] > 0, "cost"]).sum()
units_sold = int((sales_f["sold_month"] > 0).sum())
avg_price = sales_f.loc[sales_f["sold_month"] > 0, "price"].mean() if units_sold > 0 else 0

total_draw = float(monthly_f["bank_draw"].sum())
peak_draw = float(monthly_f["bank_draw"].max()) if len(monthly_f) else 0.0
peak_draw_m = int(monthly_f.loc[monthly_f["bank_draw"].idxmax(), "month"]) if len(monthly_f) else None
end_balance = float(monthly_f["balance_end"].iloc[-1]) if len(monthly_f) else 0.0

c1, c2, c3, c4, c5 = st.columns(5)
with c1:
    st.metric("Units Sold", f"{units_sold}")
with c2:
    st.metric("Revenue (MAD)", f"{int(total_revenue):,}".replace(",", " "))
with c3:
    st.metric("Margin (MAD)", f"{int(total_margin):,}".replace(",", " "))
with c4:
    st.metric("Total Bank Draw (MAD)", f"{int(total_draw):,}".replace(",", " "))
with c5:
    st.metric("End Balance (MAD)", f"{int(end_balance):,}".replace(",", " "))

# ---------- Tabs
tab1, tab2, tab3, tab4 = st.tabs(["Cashflow", "Bank Draw", "Sales Mix", "Data"])

# Cashflow line
with tab1:
    st.subheader("Cash Balance Over Time")
    fig1, ax1 = plt.subplots()
    ax1.plot(monthly_f["month"], monthly_f["balance_end"])
    ax1.set_xlabel("Month")
    ax1.set_ylabel("End Balance (MAD)")
    st.pyplot(fig1)

    st.write("**Cash In (Sales) by Month**")
    fig1b, ax1b = plt.subplots()
    ax1b.bar(monthly_f["month"], monthly_f["cash_in_from_sales"])
    ax1b.set_xlabel("Month")
    ax1b.set_ylabel("Cash In (MAD)")
    st.pyplot(fig1b)

    st.write("**Cash Out (Construction + Lot Costs) by Month**")
    fig1c, ax1c = plt.subplots()
    ax1c.bar(monthly_f["month"], (monthly_f["construction_cost"] + monthly_f["lot_costs_out"]))
    ax1c.set_xlabel("Month")
    ax1c.set_ylabel("Cash Out (MAD)")
    st.pyplot(fig1c)

# Bank Draw
with tab2:
    st.subheader("Bank Draw by Month")
    fig2, ax2 = plt.subplots()
    ax2.bar(monthly_f["month"], monthly_f["bank_draw"])
    ax2.set_xlabel("Month")
    ax2.set_ylabel("Bank Draw (MAD)")
    st.pyplot(fig2)

    if peak_draw_m is not None:
        st.info(f"**Peak draw**: {int(peak_draw):,} MAD in month {peak_draw_m}".replace(",", " "))

# Sales Mix & Scheduling
with tab3:
    st.subheader("Sales Mix ‚Äî Units & Revenue")
    sold = sales_f[sales_f["sold_month"] > 0].copy()

    mix_units = sold.groupby("type")["lot_id"].count().sort_values(ascending=False)
    mix_rev = sold.groupby("type")["price"].sum().sort_values(ascending=False)

    colA, colB = st.columns(2)
    with colA:
        st.write("**Units Sold by Type**")
        fig3a, ax3a = plt.subplots()
        ax3a.bar(mix_units.index.tolist(), mix_units.values.tolist())
        ax3a.set_xlabel("Type")
        ax3a.set_ylabel("Units Sold")
        st.pyplot(fig3a)
    with colB:
        st.write("**Revenue by Type (MAD)**")
        fig3b, ax3b = plt.subplots()
        ax3b.bar(mix_rev.index.tolist(), mix_rev.values.tolist())
        ax3b.set_xlabel("Type")
        ax3b.set_ylabel("Revenue (MAD)")
        st.pyplot(fig3b)

    st.write("**Top Lots by Margin**")
    top_lots = sold.copy()
    top_lots["margin"] = top_lots["price"] - top_lots["cost"]
    top_lots = top_lots.sort_values("margin", ascending=False).head(10)
    st.dataframe(top_lots[["lot_id", "type", "price", "cost", "margin", "sold_month"]])

# Raw data
with tab4:
    st.subheader("Sales Schedule (Filtered)")
    st.dataframe(sales_f.sort_values(["sold_month", "lot_id"]))
    st.subheader("Monthly Cashflow (Filtered)")
    st.dataframe(monthly_f)

    st.download_button(
        "‚¨áÔ∏è Download filtered Sales (CSV)",
        data=sales_f.to_csv(index=False).encode("utf-8"),
        file_name="sales_schedule_filtered.csv",
    )
    st.download_button(
        "‚¨áÔ∏è Download filtered Monthly Cashflow (CSV)",
        data=monthly_f.to_csv(index=False).encode("utf-8"),
        file_name="monthly_cashflow_filtered.csv",
    )

st.caption("Tip: Use the sidebar to point the app to your project folder. Default is the current working directory.")
